{"version":3,"sources":["components/Sidebar/Sidebar.js","components/Toolbar/Toolbar.js","components/Footbar/Footbar.js","components/Charts/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["props","className","href","toolbar","id","Footbar","Date","getFullYear","BarChart","state","chartData","data","this","options","title","display","displayTitle","text","location","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","App","getChartData","setState","labels","datasets","label","backgroundColor","Sidebar","pageWrapId","outerContainerId","style","justifyContent","alignItems","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c067bcdd.chunk.js","sourcesContent":["import React from \"react\";\nimport { slide as Menu } from \"react-burger-menu\";\n\nexport default props => {\n  return (\n    <Menu {...props}>\n    <a className=\"menu-item\" href=\"/\">\n      Home\n    </a>\n\n    <a className=\"menu-item\" href=\"/burgers\">\n      Link\n    </a>\n\n    <a className=\"menu-item\" href=\"/pizzas\">\n    Link\n    </a>\n\n    <a className=\"menu-item\" href=\"/desserts\">\n    Link\n    </a>\n  </Menu>\n  );\n};","import React from 'react';\nimport './Toolbar.css';\n\nconst toolbar = props => (\n    <header className=\"toolbar\">\n\n        \n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n       \n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">Link</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">Link</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">Link</a>\n            </li>\n          \n          </ul>\n      \n        </div>\n      </nav>\n\n          </header>\n\n          \n\n);\n\nexport default toolbar;","import React from \"react\";\nimport './Footbar.css';\n\nconst Footbar = () => {\n  return (\n\n      <div className=\"footer-copyright text-center py-3\">\n        CalPlug &copy; {new Date().getFullYear()} All Rights Reserved\n \n\n      </div>\n\n  );\n}\n\nexport default Footbar;","import React, {Component} from 'react';\n// import * as d3 from \"d3\";\n// import chroma from 'chroma-js';\nimport {Bar, Line, Pie} from 'react-chartjs-2';\n\n\nclass BarChart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n          chartData:props.chartData\n        }\n      }\n    \n      static defaultProps = {\n        displayTitle:true,\n        displayLegend: true,\n        legendPosition:'right',\n        location:'City'\n      }\n\n  render() {\n    return (\n        <div className=\"chart\">\n          <Bar\n            data={this.state.chartData}\n            options={{\n              title:{\n                display:this.props.displayTitle,\n                text:'Largest Cities In '+this.props.location,\n                fontSize:25\n              },\n              legend:{\n                display:this.props.displayLegend,\n                position:this.props.legendPosition\n              }\n            }}\n          />\n  \n          <Line\n            data={this.state.chartData}\n            options={{\n              title:{\n                display:this.props.displayTitle,\n                text:'Largest Cities In '+this.props.location,\n                fontSize:25\n              },\n              legend:{\n                display:this.props.displayLegend,\n                position:this.props.legendPosition\n              }\n            }}\n          />\n  \n          <Pie\n            data={this.state.chartData}\n            options={{\n              title:{\n                display:this.props.displayTitle,\n                text:'Largest Cities In '+this.props.location,\n                fontSize:25\n              },\n              legend:{\n                display:this.props.displayLegend,\n                position:this.props.legendPosition\n              }\n            }}\n          />\n        </div>\n      )\n  }\n \n}\n\nexport default BarChart;","import React, { Component } from 'react';\nimport Sidebar from './components/Sidebar/Sidebar';\n\nimport Toolbar from './components/Toolbar/Toolbar';\nimport './App.css';\nimport Footbar from './components/Footbar/Footbar';\nimport BarChart from './components/Charts/BarChart';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData:{}\n    }\n  }\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  getChartData(){\n    // Ajax calls here\n    this.setState({\n      chartData:{\n        labels: ['Los Angeles', 'San Diego', 'San Francisco', 'San Jose', 'Sacramento', 'Irvine'],\n        datasets:[\n          {\n            label:'Population',\n            data:[\n              617594,\n              181045,\n              153060,\n              106519,\n              105162,\n              95072\n            ],\n            backgroundColor:[\n              'rgba(255, 99, 132, 0.6)',\n              'rgba(54, 162, 235, 0.6)',\n              'rgba(255, 206, 86, 0.6)',\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(153, 102, 255, 0.6)',\n              'rgba(255, 159, 64, 0.6)',\n              'rgba(255, 99, 132, 0.6)'\n            ]\n          }\n        ]\n      }\n    });\n  }\n  render() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n     <Toolbar />\n    \n    </div>\n    <div>\n    <Sidebar pageWrapId={\"page-wrap\"} outerContainerId={\"App\"} />     \n    <div className=\"container\" style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}>\n              <BarChart chartData={this.state.chartData} location=\"California\" legendPosition=\"bottom\"/>\n\n              </div>\n<div className=\"container\" style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}>\n<footer className=\"navbar-fixed-bottom\">\n\n<Footbar/>\n\n</footer>\n</div>\n    </div>\n\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}